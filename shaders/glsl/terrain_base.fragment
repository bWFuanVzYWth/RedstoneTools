#version 300 es

#pragma optimize(on)

precision lowp float;

#include "shaderfunction.lin"

uniform sampler2D TEXTURE_0;

centroid in vec2 uv0;
in vec4 lig;
#if FAST_FOG == 1
in vec4 fogcol;
#endif
#if REDSTONE_POWER
in vec4 col;
#endif
#if REDSTONE_POWER || CHUNK_BOUND
in vec4 chupos;
#endif

out vec4 FragColor;

void main()
{
#ifdef BYPASS_PIXEL_SHADER
	FragColor = vec4(0.0, 0.0, 0.0, 0.0);
	return;
#else

	vec4 texcol = texture(TEXTURE_0, uv0);

#if defined(ALPHA_TEST) && !defined(SEASONS_FAR)
#ifdef ALPHA_TO_COVERAGE
#define ALPHA_THRESHOLD 0.05
#else
#define ALPHA_THRESHOLD 0.50
#endif
	if (texcol.a < ALPHA_THRESHOLD)
		discard;
#endif

	vec4 outcol = texcol * lig;

#if REDSTONE_POWER || CHUNK_BOUND
	vec3 blopos = fract(chupos.xyz);
#endif

#if defined(ALPHA_TEST) && !defined(SEASONS) && !defined(SEASONS_FAR) && !defined(BLEND)
#if REDSTONE_POWER
	vec3 rswcol = vec3(0.0);
	if (col.b < 0.001 && all(lessThan(abs(0.5 - blopos.xz), vec2(2.0 / 16.0))))
	{
		int power = int(max(0.0, (25.0 * col.r - 9.5)));
		ivec2 offset = ivec2(power * 32 + 8, 8);
		ivec2 ruv = ivec2(blopos.xz * 64.0 - 24.0);
		vec4 num = texelFetch(TEXTURE_0, ruv + offset, 0);
		rswcol += num.rrr;
	}
	outcol.rgb += rswcol;
#endif
#endif

#if CHUNK_BOUND
	vec3 chucol = vec3(0.0);
	bvec3 cb = greaterThan(abs(8.0 - chupos.xyz), vec3(8.0 - 1.5 / 16.0));
	bvec3 bb = greaterThan(abs(0.5 - blopos.xyz), vec3(0.5 - 0.5 / 16.0));
	bool t_xz = cb.x || cb.z;
	if (t_xz && (bb.x && bb.y || bb.y && bb.z || bb.z && bb.x))
	{
		bool t_cb = cb.x && cb.y || cb.y && cb.z || cb.z && cb.x;
		chucol.r += float(t_cb && cb.z);
		chucol.b += float(t_cb && cb.x);
		chucol.rgb += (t_cb && t_xz) ? vec3(0.0) : vec3(0.5);
	}
	outcol.rgb += chucol;
#endif

#if FAST_FOG == 1
	outcol.rgb = mix(outcol.rgb, fogcol.rgb, fogcol.a);
#endif

	FragColor = outcol;

#endif
}
