#version 300 es

#pragma optimize(on)

precision mediump float;

#include "shaderfunction.lin"

uniform sampler2D TEXTURE_0;

centroid in vec2 uv0;
in vec4 lig;
in vec4 fogcol;
in vec4 col;
in vec4 chupos;
in vec2 uv1;

out vec4 FragColor;

void main() {
#if LAZY_CHUNK_LOAD && defined(ALLOW_FADE)
	FragColor = vec4(0.0, 0.0, 0.0, 0.0);
	return;
#else

#ifdef BYPASS_PIXEL_SHADER
	FragColor = vec4(0.0, 0.0, 0.0, 0.0);
	return;
#else

	vec4 texcol = texture(TEXTURE_0, uv0);

#if defined(ALPHA_TEST) && !defined(SEASONS_FAR)
#ifdef ALPHA_TO_COVERAGE
#define ALPHA_THRESHOLD 0.05
#else
#define ALPHA_THRESHOLD 0.50
#endif
	if(texcol.a < ALPHA_THRESHOLD)
		discard;
#endif

	vec4 outcol = texcol * lig;

#if REDSTONE_POWER || CHUNK_BOUND || LIGHT_MAP
	vec3 blopos = fract(chupos.xyz);
#endif

#if CHUNK_BOUND || LIGHT_MAP
	vec4 ddxpos = dFdx(chupos);
	vec4 ddypos = dFdy(chupos);
	vec3 N = normalize(cross(ddxpos.xyz, ddypos.xyz));
#endif

#if defined(ALPHA_TEST) && !defined(SEASONS) && !defined(SEASONS_FAR) && !defined(BLEND)
#if REDSTONE_POWER
	outcol.rgb = render_redstone_power(outcol.rgb, col.rgb, blopos.xyz, TEXTURE_0);
#endif
#endif

#if CHUNK_BOUND
	outcol.rgb = render_chunk_bound(outcol.rgb, chupos.xyz, N, blopos.xyz);
#endif

#if LIGHT_MAP == 1
	outcol.rgb = render_light_bound(outcol.rgb, uv1, N, blopos);
#endif

#if defined(FANCY) && FAST_FOG == 1
	outcol.rgb = mix(outcol.rgb, fogcol.rgb, fogcol.a);
#endif

	FragColor = outcol;

#endif //BYPASS_PIXEL_SHADER

#endif //LAZY_CHUNK_LOAD
}
