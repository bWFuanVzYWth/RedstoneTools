#include "Users/Sets.txt"

//math
float saturate(float x) {
    return clamp(x, 0.0, 1.0);
}

vec2 saturate(vec2 x) {
    return clamp(x, vec2(0.0), vec2(1.0));
}

vec3 saturate(vec3 x) {
    return clamp(x, vec3(0.0), vec3(1.0));
}

//redstone_power
vec3 render_redstone_power(vec3 oc, vec3 rwc) {
    return oc + rwc;
}

vec3 render_redstone_power(vec3 oc, vec3 ic, vec3 bp, sampler2D t) {
    vec3 rwc = vec3(0.0);
    if(ic.b < 0.001 && all(lessThan(abs(0.5 - bp.xz), vec2(2.0 / 16.0)))) {
        int pw = int(max(0.0, (25.0 * ic.r - 9.5)));
        ivec2 os = ivec2(pw * 32 + 8, 8);
        ivec2 ruv = ivec2(bp.xz * 64.0 - 24.0);
        vec4 num = texelFetch(t, ruv + os, 0);
        rwc += num.rrr;
    }
    return render_redstone_power(oc, rwc);
}

#define CHUNK_BOUND_WIDTH (0.5 / 16.0)

vec3 render_chunk_bound(vec3 oc, vec3 cp) {
    oc.rb += saturate(abs(8.0 - cp.xz) - (8.0 - CHUNK_BOUND_WIDTH)) * (1.0 / CHUNK_BOUND_WIDTH) * 0.2;
    return oc;
}
