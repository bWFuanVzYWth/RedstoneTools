#version 300 es
precision mediump float;

#include "shaderfunction.lin"

#line 5

#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif // MSAA_FRAMEBUFFER_ENABLED

_centroid out vec2 uv;

uniform MAT4 WORLDVIEWPROJ;
uniform MAT4 WORLD;
uniform MAT4 WORLDVIEW;
uniform MAT4 PROJ;

uniform vec4 OVERLAY_COLOR;
uniform vec4 TILE_LIGHT_COLOR;
uniform vec4 CHANGE_COLOR;
uniform vec4 GLINT_COLOR;
uniform vec4 UV_ANIM;
uniform vec2 UV_OFFSET;
uniform vec2 UV_ROTATION;
uniform vec2 GLINT_UV_SCALE;
uniform vec4 MULTIPLICATIVE_TINT_CHANGE_COLOR;

uniform vec3 VIEW_POS;
uniform float TIME;
uniform vec4 FOG_COLOR;
uniform vec2 FOG_CONTROL;
uniform float RENDER_DISTANCE;
uniform float FAR_CHUNKS_DISTANCE;

#ifdef USE_SKINNING

#if defined(LARGE_VERTEX_SHADER_UNIFORMS)
uniform MAT4 BONES[8];
#else
uniform MAT4 BONE;
#endif

#endif

in mediump vec4 POSITION;
in vec2 TEXCOORD_0;
in vec4 NORMAL;
#if defined(USE_SKINNING)
in float BONEID_0;
#endif

#ifdef COLOR_BASED
	in vec4 COLOR;
	out vec4 vertColor;
#endif

out vec4 light;

#ifdef USE_OVERLAY
	// When drawing horses on specific android devices, overlay color ends up being garbage data.
	// Changing overlay color to high precision appears to fix the issue on devices tested
	out vec4 overlayColor;
#endif

#ifdef TINTED_ALPHA_TEST
	out float alphaTestMultiplier;
#endif

#ifdef GLINT
	out vec4 layerUV;
	// out vec2 layer1UV;
	// out vec2 layer2UV;
	out vec4 tileLightColor;
	out vec4 glintColor;
#endif

const float AMBIENT = 0.45;

const float XFAC = -0.1;
const float ZFAC = 0.1;

float lightIntensity(vec4 position, vec4 normal) {
#if (FAST_LIGHT >= 2 || !defined(FANCY))
	return 1.0;
#else
	vec3 N = (WORLD * normal).xyz;

	N.y *= TILE_LIGHT_COLOR.w; //TILE_LIGHT_COLOR.w contains the direction of the light

	//take care of double sided polygons on materials without culling
	#ifdef FLIP_BACKFACES
		vec3 viewDir = (WORLD * position).xyz;
		N *= sign(dot(-N, viewDir))
	#endif

		return (1.0+N.y) * (0.5 * (1.0-AMBIENT)) + N.x*N.x * XFAC + N.z*N.z * ZFAC + AMBIENT;
#endif
}

#ifdef GLINT
// 风险比较高的优化，万一有bug可以改回来
// 假设旋转只能是90°的整数倍，用2次乘法替换4次三角函数

// vec2 calculateLayerUV(float offset, float rotation) {
// 	vec2 uv = TEXCOORD_0;
// 	uv -= 0.5;
// 	float rsin = sin(rotation);
// 	float rcos = cos(rotation);
// 	uv = mat2(rcos, -rsin, rsin, rcos) * uv;
// 	uv.x += offset;
// 	uv += 0.5;

// 	return uv * GLINT_UV_SCALE;
// }

#define Pi 3.141592653589793

vec4 cos_fast(vec4 x) {
	return abs(fract(abs(x * (1.0/2.0/Pi))) * 2.0 - 1.0) * 2.0 - 1.0;
}

vec4 calculateLayerUV_fast(vec2 offset, vec2 rotation) {

	vec4 uv_pack = vec4(TEXCOORD_0, TEXCOORD_0);
	uv_pack -= 0.5;

	vec4 r = vec4(rotation.x, rotation.x, rotation.y, rotation.y);
	r += vec4(-Pi/2.0, 0.0, -Pi/2.0, 0.0);
	vec4 f_r = cos_fast(r);

	uv_pack = vec4(mat2(f_r.y, -f_r.x, f_r.x, f_r.y) * uv_pack.xy, mat2(f_r.w, -f_r.z, f_r.z, f_r.w) * uv_pack.zw);

	uv_pack.xz += offset;
	uv_pack += 0.5;

	return uv_pack * vec4(GLINT_UV_SCALE, GLINT_UV_SCALE);
}
#endif

void main()
{
	POS4 entitySpacePosition;
	POS4 entitySpaceNormal;

#ifdef USE_SKINNING
	#if defined(LARGE_VERTEX_SHADER_UNIFORMS)
		entitySpacePosition = BONES[int(BONEID_0)] * POSITION;
		entitySpaceNormal = BONES[int(BONEID_0)] * NORMAL;
	#else
		entitySpacePosition = BONE * POSITION;
		entitySpaceNormal = BONE * NORMAL;
	#endif
#else
	entitySpacePosition = POSITION * vec4(1, 1, 1, 1);
	entitySpaceNormal = NORMAL * vec4(1, 1, 1, 0);
#endif
	POS4 pos = WORLDVIEWPROJ * entitySpacePosition;

#if ENTITY_X_RAY
	// 实体透视
	pos.z *= (1.0 / 64.0);
#endif

	gl_Position = pos;

	float L = lightIntensity(entitySpacePosition, entitySpaceNormal);

#ifdef USE_OVERLAY
	L += OVERLAY_COLOR.a * 0.35;
#endif

#ifdef TINTED_ALPHA_TEST
	alphaTestMultiplier = OVERLAY_COLOR.a;
#endif

	light = vec4(vec3(L) * TILE_LIGHT_COLOR.xyz, 1.0);

#ifdef COLOR_BASED
	vertColor = COLOR;
#endif

#ifdef USE_OVERLAY
	overlayColor = OVERLAY_COLOR;
#endif

#ifndef NO_TEXTURE
	uv = TEXCOORD_0;
#endif

#ifdef USE_UV_ANIM
	uv.xy = UV_ANIM.xy + (uv.xy * UV_ANIM.zw);
#endif

#ifdef GLINT
	glintColor = GLINT_COLOR;

	layerUV = calculateLayerUV_fast(UV_OFFSET, UV_ROTATION);
	// layer1UV = calculateLayerUV(UV_OFFSET.x, UV_ROTATION.x);
	// layer2UV = calculateLayerUV(UV_OFFSET.y, UV_ROTATION.y);
	tileLightColor = TILE_LIGHT_COLOR;
#endif
}
